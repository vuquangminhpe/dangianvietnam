"use client";

import React, { useState, useEffect, useRef } from "react";
import { motion, type PanInfo } from "framer-motion";
import { useNavigate } from "react-router-dom";

interface CardData {
  id: string
  imageUrl: string
  title: string
  duration: number
  genre: string[]
  release_date: string
  average_rating: number
}

interface IconProps {
  className?: string;
}

interface CardProps {
  card: CardData;
  index: number;
  activeIndex: number;
  totalCards: number;
}

const ChevronLeftIcon: React.FC<IconProps> = ({ className }) => (
  <svg
    version='1.1'
    xmlns='http://www.w3.org/2000/svg'
    width='88'
    height='81'
    viewBox='0 0 352 324'
    className={className}
    style={{ transform: 'scaleX(-1)' }}
  >
    <path
      d='M0 0 C2.62348438 0.77327467 5.24974815 1.53534095 7.87890625 2.2890625 C10.04231813 3.01418398 11.98668942 3.93171276 14 5 C14 5.66 14 6.32 14 7 C14.57234375 7.11472656 15.1446875 7.22945312 15.734375 7.34765625 C18.21471656 8.06182356 20.06368697 9.07307872 22.25 10.4375 C22.95640625 10.86933594 23.6628125 11.30117187 24.390625 11.74609375 C24.92171875 12.15988281 25.4528125 12.57367188 26 13 C26 13.66 26 14.32 26 15 C26.57234375 15.2475 27.1446875 15.495 27.734375 15.75 C30.35010611 17.19316199 32.14773456 18.88216222 34.25 21 C34.95640625 21.70125 35.6628125 22.4025 36.390625 23.125 C38 25 38 25 38 27 C38.66 27 39.32 27 40 27 C41.3671875 28.72265625 41.3671875 28.72265625 42.875 31.0625 C43.36742187 31.81660156 43.85984375 32.57070312 44.3671875 33.34765625 C47.91081137 39.10392564 50.8383722 44.56072382 53.0625 50.9375 C53.31926514 51.67258789 53.57603027 52.40767578 53.84057617 53.16503906 C61.46644919 75.82228517 61.03057733 97.56546555 53 120 C52.42765625 121.61068359 52.42765625 121.61068359 51.84375 123.25390625 C48.9427308 130.77107426 45.0572803 137.70351857 40 144 C39.34 144 38.68 144 38 144 C37.773125 144.556875 37.54625 145.11375 37.3125 145.6875 C35.63281165 148.6469509 33.45866715 150.66126784 31 153 C30.443125 153.598125 29.88625 154.19625 29.3125 154.8125 C28 156 28 156 26 156 C26 156.66 26 157.32 26 158 C20.58823529 162 20.58823529 162 18 162 C18 162.66 18 163.32 18 164 C15.50252977 165.27601331 13.00222064 166.54586171 10.5 167.8125 C9.80390625 168.16892578 9.1078125 168.52535156 8.390625 168.89257812 C-7.65023774 176.98727275 -25.14435384 180.49685299 -43 178 C-44.23105469 177.83628906 -45.46210938 177.67257813 -46.73046875 177.50390625 C-59.53802292 175.56825173 -71.521974 170.93815856 -83 165 C-83 164.34 -83 163.68 -83 163 C-84.32 162.67 -85.64 162.34 -87 162 C-87 161.34 -87 160.68 -87 160 C-87.763125 159.71125 -88.52625 159.4225 -89.3125 159.125 C-92 158 -92 158 -95 156 C-95 155.34 -95 154.68 -95 154 C-95.66 154 -96.32 154 -97 154 C-97 153.34 -97 152.68 -97 152 C-97.66 152 -98.32 152 -99 152 C-99 151.34 -99 150.68 -99 150 C-99.66 150 -100.32 150 -101 150 C-101 149.34 -101 148.68 -101 148 C-101.66 148 -102.32 148 -103 148 C-107 142.58823529 -107 142.58823529 -107 140 C-107.66 140 -108.32 140 -109 140 C-123.99617543 120.39656585 -127.58019928 94.26453955 -124.68652344 70.41650391 C-122.49882568 57.04133388 -117.36249835 41.70500542 -109 31 C-108.34 31 -107.68 31 -107 31 C-106.690625 29.9790625 -106.690625 29.9790625 -106.375 28.9375 C-101.14390208 17.76197263 -86.95972532 8.20178008 -76 3 C-72.65208069 1.82706307 -69.30322154 0.79895724 -65.8828125 -0.140625 C-63.36985038 -0.8897465 -61.32099596 -1.81778792 -59 -3 C-39.24116948 -8.78030797 -19.22743405 -6.23267261 0 0 Z '
      fill='#720400'
      transform='translate(223,78)'
    />
    <path
      d='M0 0 C2.62348438 0.77327467 5.24974815 1.53534095 7.87890625 2.2890625 C10.04231813 3.01418398 11.98668942 3.93171276 14 5 C14 5.66 14 6.32 14 7 C14.57234375 7.11472656 15.1446875 7.22945312 15.734375 7.34765625 C18.21471656 8.06182356 20.06368697 9.07307872 22.25 10.4375 C22.95640625 10.86933594 23.6628125 11.30117187 24.390625 11.74609375 C24.92171875 12.15988281 25.4528125 12.57367188 26 13 C26 13.66 26 14.32 26 15 C26.57234375 15.2475 27.1446875 15.495 27.734375 15.75 C30.35010611 17.19316199 32.14773456 18.88216222 34.25 21 C34.95640625 21.70125 35.6628125 22.4025 36.390625 23.125 C38 25 38 25 38 27 C38.66 27 39.32 27 40 27 C41.3671875 28.72265625 41.3671875 28.72265625 42.875 31.0625 C43.36742187 31.81660156 43.85984375 32.57070312 44.3671875 33.34765625 C47.91081137 39.10392564 50.8383722 44.56072382 53.0625 50.9375 C53.31926514 51.67258789 53.57603027 52.40767578 53.84057617 53.16503906 C61.46644919 75.82228517 61.03057733 97.56546555 53 120 C52.42765625 121.61068359 52.42765625 121.61068359 51.84375 123.25390625 C48.9427308 130.77107426 45.0572803 137.70351857 40 144 C39.34 144 38.68 144 38 144 C37.773125 144.556875 37.54625 145.11375 37.3125 145.6875 C35.63281165 148.6469509 33.45866715 150.66126784 31 153 C30.443125 153.598125 29.88625 154.19625 29.3125 154.8125 C28 156 28 156 26 156 C26 156.66 26 157.32 26 158 C20.58823529 162 20.58823529 162 18 162 C18 162.66 18 163.32 18 164 C15.50252977 165.27601331 13.00222064 166.54586171 10.5 167.8125 C9.80390625 168.16892578 9.1078125 168.52535156 8.390625 168.89257812 C-7.65023774 176.98727275 -25.14435384 180.49685299 -43 178 C-44.23105469 177.83628906 -45.46210938 177.67257813 -46.73046875 177.50390625 C-59.53802292 175.56825173 -71.521974 170.93815856 -83 165 C-83 164.34 -83 163.68 -83 163 C-84.32 162.67 -85.64 162.34 -87 162 C-87 161.34 -87 160.68 -87 160 C-87.763125 159.71125 -88.52625 159.4225 -89.3125 159.125 C-92 158 -92 158 -95 156 C-95 155.34 -95 154.68 -95 154 C-95.66 154 -96.32 154 -97 154 C-97 153.34 -97 152.68 -97 152 C-97.66 152 -98.32 152 -99 152 C-99 151.34 -99 150.68 -99 150 C-99.66 150 -100.32 150 -101 150 C-101 149.34 -101 148.68 -101 148 C-101.66 148 -102.32 148 -103 148 C-107 142.58823529 -107 142.58823529 -107 140 C-107.66 140 -108.32 140 -109 140 C-123.99617543 120.39656585 -127.58019928 94.26453955 -124.68652344 70.41650391 C-122.49882568 57.04133388 -117.36249835 41.70500542 -109 31 C-108.34 31 -107.68 31 -107 31 C-106.690625 29.9790625 -106.690625 29.9790625 -106.375 28.9375 C-101.14390208 17.76197263 -86.95972532 8.20178008 -76 3 C-72.65208069 1.82706307 -69.30322154 0.79895724 -65.8828125 -0.140625 C-63.36985038 -0.8897465 -61.32099596 -1.81778792 -59 -3 C-39.24116948 -8.78030797 -19.22743405 -6.23267261 0 0 Z M-98 28 C-111.42282508 43.81501173 -117.9416424 63.1849572 -116.78125 83.90625 C-114.79245461 106.11806803 -104.57596328 124.1116441 -87.8125 138.6875 C-72.53595782 150.79303482 -53.38489797 156.39891016 -34 155 C-12.41894055 152.23558011 6.28121268 142.80267872 19.9296875 125.5625 C23.9642491 120.02147119 27.33354122 114.31438285 30 108 C30.46792969 106.90816406 30.93585938 105.81632812 31.41796875 104.69140625 C38.0561791 87.59166908 37.41801951 65.86668261 30.15429688 49.04101562 C20.96638727 29.12412453 5.73646905 14.42439862 -14.8125 6.625 C-44.54405811 -3.75436939 -77.05848213 4.79371812 -98 28 Z '
      fill='#000000'
      transform='translate(223,78)'
    />
    <path
      d='M0 0 C15.56612969 12.98388728 26.06714687 30.4826973 28.00292969 50.82788086 C29.57615514 73.13024169 24.58579585 92.50695905 9.88354492 109.63525391 C-4.26049671 125.55316836 -23.18840734 134.69702258 -44.35791016 136.24731445 C-66.77628192 136.85771566 -85.58422276 128.54101066 -101.88525391 113.38793945 C-115.92812309 99.41424697 -123.4051051 81.3792741 -124.29541016 61.61450195 C-124.11280054 40.61439586 -117.31995928 21.74801657 -102.65087891 6.35668945 C-74.71006851 -20.98963561 -31.01744422 -24.6719648 0 0 Z M-103.09228516 15.18481445 C-109.29139022 23.27932934 -113.96645315 32.04303797 -116.26416016 42.02075195 C-116.78236328 43.86540039 -116.78236328 43.86540039 -117.31103516 45.74731445 C-121.60559506 63.02617638 -117.29564097 81.53813698 -108.46728516 96.6105957 C-105.32519044 101.64998915 -101.51652812 105.89302236 -97.26416016 110.02075195 C-96.57837891 110.71555664 -95.89259766 111.41036133 -95.18603516 112.1262207 C-81.02231473 125.68667156 -64.18726427 130.69905848 -44.89990234 130.56201172 C-26.01923776 129.94999414 -9.86097633 122.12759277 3.73583984 109.02075195 C18.38574921 92.33741668 24.3350555 73.26799788 22.95458984 51.37036133 C21.12456968 31.713984 10.2141029 15.60720017 -4.57666016 3.20825195 C-36.24888446 -19.9651644 -77.75682774 -14.01385101 -103.09228516 15.18481445 Z '
      fill='#F5E1C8'
      transform='translate(230.26416015625,96.979248046875)'
    />
    <path
      d='M0 0 C2.03515625 1.86328125 2.03515625 1.86328125 4.0625 4.3125 C8.14517622 9.08134029 12.43671104 13.50886169 16.92602539 17.88793945 C23.98571939 24.83057668 23.98571939 24.83057668 24.03515625 28.87890625 C22.71419252 32.86173651 20.43789863 35.15144799 17.4375 37.9375 C16.89681885 38.45820068 16.3561377 38.97890137 15.79907227 39.51538086 C12.17037992 42.98445173 8.45557088 46.35690461 4.62109375 49.59765625 C2.95683545 50.98727199 2.95683545 50.98727199 1.4453125 52.6640625 C0 54 0 54 -2.5625 54.3125 C-5 54 -5 54 -7 52 C-7.43744906 48.50459078 -7.47804623 46.68670533 -5.43945312 43.75830078 C-4.72724609 43.07751465 -4.01503906 42.39672852 -3.28125 41.6953125 C-2.13076172 40.57382813 -2.13076172 40.57382813 -0.95703125 39.4296875 C-0.14621094 38.66914063 0.66460937 37.90859375 1.5 37.125 C2.31082031 36.34125 3.12164062 35.5575 3.95703125 34.75 C5.95853249 32.81913998 7.97265624 30.90364788 10 29 C8.73680902 26.26265518 7.41378517 24.1401852 5.35546875 21.94140625 C4.84306641 21.39033203 4.33066406 20.83925781 3.80273438 20.27148438 C3.26970703 19.70751953 2.73667969 19.14355469 2.1875 18.5625 C1.66607422 18.00240234 1.14464844 17.44230469 0.60742188 16.86523438 C-1.82672933 14.2609053 -4.28242298 11.7280228 -6.8515625 9.25390625 C-9 7 -9 7 -9.5625 4.375 C-9 2 -9 2 -7.3125 0.125 C-4.31552241 -1.3329891 -3.14564604 -1.01244596 0 0 Z '
      fill='#FBE5CC'
      transform='translate(175,130)'
    />
  </svg>
)

const ChevronRightIcon: React.FC<IconProps> = ({ className }) => (
  <svg
    version='1.1'
    xmlns='http://www.w3.org/2000/svg'
    width='88'
    height='81'
    viewBox='0 0 352 324'
    className={className}
  >
    <path
      d='M0 0 C2.62348438 0.77327467 5.24974815 1.53534095 7.87890625 2.2890625 C10.04231813 3.01418398 11.98668942 3.93171276 14 5 C14 5.66 14 6.32 14 7 C14.57234375 7.11472656 15.1446875 7.22945312 15.734375 7.34765625 C18.21471656 8.06182356 20.06368697 9.07307872 22.25 10.4375 C22.95640625 10.86933594 23.6628125 11.30117187 24.390625 11.74609375 C24.92171875 12.15988281 25.4528125 12.57367188 26 13 C26 13.66 26 14.32 26 15 C26.57234375 15.2475 27.1446875 15.495 27.734375 15.75 C30.35010611 17.19316199 32.14773456 18.88216222 34.25 21 C34.95640625 21.70125 35.6628125 22.4025 36.390625 23.125 C38 25 38 25 38 27 C38.66 27 39.32 27 40 27 C41.3671875 28.72265625 41.3671875 28.72265625 42.875 31.0625 C43.36742187 31.81660156 43.85984375 32.57070312 44.3671875 33.34765625 C47.91081137 39.10392564 50.8383722 44.56072382 53.0625 50.9375 C53.31926514 51.67258789 53.57603027 52.40767578 53.84057617 53.16503906 C61.46644919 75.82228517 61.03057733 97.56546555 53 120 C52.42765625 121.61068359 52.42765625 121.61068359 51.84375 123.25390625 C48.9427308 130.77107426 45.0572803 137.70351857 40 144 C39.34 144 38.68 144 38 144 C37.773125 144.556875 37.54625 145.11375 37.3125 145.6875 C35.63281165 148.6469509 33.45866715 150.66126784 31 153 C30.443125 153.598125 29.88625 154.19625 29.3125 154.8125 C28 156 28 156 26 156 C26 156.66 26 157.32 26 158 C20.58823529 162 20.58823529 162 18 162 C18 162.66 18 163.32 18 164 C15.50252977 165.27601331 13.00222064 166.54586171 10.5 167.8125 C9.80390625 168.16892578 9.1078125 168.52535156 8.390625 168.89257812 C-7.65023774 176.98727275 -25.14435384 180.49685299 -43 178 C-44.23105469 177.83628906 -45.46210938 177.67257813 -46.73046875 177.50390625 C-59.53802292 175.56825173 -71.521974 170.93815856 -83 165 C-83 164.34 -83 163.68 -83 163 C-84.32 162.67 -85.64 162.34 -87 162 C-87 161.34 -87 160.68 -87 160 C-87.763125 159.71125 -88.52625 159.4225 -89.3125 159.125 C-92 158 -92 158 -95 156 C-95 155.34 -95 154.68 -95 154 C-95.66 154 -96.32 154 -97 154 C-97 153.34 -97 152.68 -97 152 C-97.66 152 -98.32 152 -99 152 C-99 151.34 -99 150.68 -99 150 C-99.66 150 -100.32 150 -101 150 C-101 149.34 -101 148.68 -101 148 C-101.66 148 -102.32 148 -103 148 C-107 142.58823529 -107 142.58823529 -107 140 C-107.66 140 -108.32 140 -109 140 C-123.99617543 120.39656585 -127.58019928 94.26453955 -124.68652344 70.41650391 C-122.49882568 57.04133388 -117.36249835 41.70500542 -109 31 C-108.34 31 -107.68 31 -107 31 C-106.690625 29.9790625 -106.690625 29.9790625 -106.375 28.9375 C-101.14390208 17.76197263 -86.95972532 8.20178008 -76 3 C-72.65208069 1.82706307 -69.30322154 0.79895724 -65.8828125 -0.140625 C-63.36985038 -0.8897465 -61.32099596 -1.81778792 -59 -3 C-39.24116948 -8.78030797 -19.22743405 -6.23267261 0 0 Z '
      fill='#720400'
      transform='translate(223,78)'
    />
    <path
      d='M0 0 C2.62348438 0.77327467 5.24974815 1.53534095 7.87890625 2.2890625 C10.04231813 3.01418398 11.98668942 3.93171276 14 5 C14 5.66 14 6.32 14 7 C14.57234375 7.11472656 15.1446875 7.22945312 15.734375 7.34765625 C18.21471656 8.06182356 20.06368697 9.07307872 22.25 10.4375 C22.95640625 10.86933594 23.6628125 11.30117187 24.390625 11.74609375 C24.92171875 12.15988281 25.4528125 12.57367188 26 13 C26 13.66 26 14.32 26 15 C26.57234375 15.2475 27.1446875 15.495 27.734375 15.75 C30.35010611 17.19316199 32.14773456 18.88216222 34.25 21 C34.95640625 21.70125 35.6628125 22.4025 36.390625 23.125 C38 25 38 25 38 27 C38.66 27 39.32 27 40 27 C41.3671875 28.72265625 41.3671875 28.72265625 42.875 31.0625 C43.36742187 31.81660156 43.85984375 32.57070312 44.3671875 33.34765625 C47.91081137 39.10392564 50.8383722 44.56072382 53.0625 50.9375 C53.31926514 51.67258789 53.57603027 52.40767578 53.84057617 53.16503906 C61.46644919 75.82228517 61.03057733 97.56546555 53 120 C52.42765625 121.61068359 52.42765625 121.61068359 51.84375 123.25390625 C48.9427308 130.77107426 45.0572803 137.70351857 40 144 C39.34 144 38.68 144 38 144 C37.773125 144.556875 37.54625 145.11375 37.3125 145.6875 C35.63281165 148.6469509 33.45866715 150.66126784 31 153 C30.443125 153.598125 29.88625 154.19625 29.3125 154.8125 C28 156 28 156 26 156 C26 156.66 26 157.32 26 158 C20.58823529 162 20.58823529 162 18 162 C18 162.66 18 163.32 18 164 C15.50252977 165.27601331 13.00222064 166.54586171 10.5 167.8125 C9.80390625 168.16892578 9.1078125 168.52535156 8.390625 168.89257812 C-7.65023774 176.98727275 -25.14435384 180.49685299 -43 178 C-44.23105469 177.83628906 -45.46210938 177.67257813 -46.73046875 177.50390625 C-59.53802292 175.56825173 -71.521974 170.93815856 -83 165 C-83 164.34 -83 163.68 -83 163 C-84.32 162.67 -85.64 162.34 -87 162 C-87 161.34 -87 160.68 -87 160 C-87.763125 159.71125 -88.52625 159.4225 -89.3125 159.125 C-92 158 -92 158 -95 156 C-95 155.34 -95 154.68 -95 154 C-95.66 154 -96.32 154 -97 154 C-97 153.34 -97 152.68 -97 152 C-97.66 152 -98.32 152 -99 152 C-99 151.34 -99 150.68 -99 150 C-99.66 150 -100.32 150 -101 150 C-101 149.34 -101 148.68 -101 148 C-101.66 148 -102.32 148 -103 148 C-107 142.58823529 -107 142.58823529 -107 140 C-107.66 140 -108.32 140 -109 140 C-123.99617543 120.39656585 -127.58019928 94.26453955 -124.68652344 70.41650391 C-122.49882568 57.04133388 -117.36249835 41.70500542 -109 31 C-108.34 31 -107.68 31 -107 31 C-106.690625 29.9790625 -106.690625 29.9790625 -106.375 28.9375 C-101.14390208 17.76197263 -86.95972532 8.20178008 -76 3 C-72.65208069 1.82706307 -69.30322154 0.79895724 -65.8828125 -0.140625 C-63.36985038 -0.8897465 -61.32099596 -1.81778792 -59 -3 C-39.24116948 -8.78030797 -19.22743405 -6.23267261 0 0 Z M-98 28 C-111.42282508 43.81501173 -117.9416424 63.1849572 -116.78125 83.90625 C-114.79245461 106.11806803 -104.57596328 124.1116441 -87.8125 138.6875 C-72.53595782 150.79303482 -53.38489797 156.39891016 -34 155 C-12.41894055 152.23558011 6.28121268 142.80267872 19.9296875 125.5625 C23.9642491 120.02147119 27.33354122 114.31438285 30 108 C30.46792969 106.90816406 30.93585938 105.81632812 31.41796875 104.69140625 C38.0561791 87.59166908 37.41801951 65.86668261 30.15429688 49.04101562 C20.96638727 29.12412453 5.73646905 14.42439862 -14.8125 6.625 C-44.54405811 -3.75436939 -77.05848213 4.79371812 -98 28 Z '
      fill='#000000'
      transform='translate(223,78)'
    />
    <path
      d='M0 0 C15.56612969 12.98388728 26.06714687 30.4826973 28.00292969 50.82788086 C29.57615514 73.13024169 24.58579585 92.50695905 9.88354492 109.63525391 C-4.26049671 125.55316836 -23.18840734 134.69702258 -44.35791016 136.24731445 C-66.77628192 136.85771566 -85.58422276 128.54101066 -101.88525391 113.38793945 C-115.92812309 99.41424697 -123.4051051 81.3792741 -124.29541016 61.61450195 C-124.11280054 40.61439586 -117.31995928 21.74801657 -102.65087891 6.35668945 C-74.71006851 -20.98963561 -31.01744422 -24.6719648 0 0 Z M-103.09228516 15.18481445 C-109.29139022 23.27932934 -113.96645315 32.04303797 -116.26416016 42.02075195 C-116.78236328 43.86540039 -116.78236328 43.86540039 -117.31103516 45.74731445 C-121.60559506 63.02617638 -117.29564097 81.53813698 -108.46728516 96.6105957 C-105.32519044 101.64998915 -101.51652812 105.89302236 -97.26416016 110.02075195 C-96.57837891 110.71555664 -95.89259766 111.41036133 -95.18603516 112.1262207 C-81.02231473 125.68667156 -64.18726427 130.69905848 -44.89990234 130.56201172 C-26.01923776 129.94999414 -9.86097633 122.12759277 3.73583984 109.02075195 C18.38574921 92.33741668 24.3350555 73.26799788 22.95458984 51.37036133 C21.12456968 31.713984 10.2141029 15.60720017 -4.57666016 3.20825195 C-36.24888446 -19.9651644 -77.75682774 -14.01385101 -103.09228516 15.18481445 Z '
      fill='#F5E1C8'
      transform='translate(230.26416015625,96.979248046875)'
    />
    <path
      d='M0 0 C2.03515625 1.86328125 2.03515625 1.86328125 4.0625 4.3125 C8.14517622 9.08134029 12.43671104 13.50886169 16.92602539 17.88793945 C23.98571939 24.83057668 23.98571939 24.83057668 24.03515625 28.87890625 C22.71419252 32.86173651 20.43789863 35.15144799 17.4375 37.9375 C16.89681885 38.45820068 16.3561377 38.97890137 15.79907227 39.51538086 C12.17037992 42.98445173 8.45557088 46.35690461 4.62109375 49.59765625 C2.95683545 50.98727199 2.95683545 50.98727199 1.4453125 52.6640625 C0 54 0 54 -2.5625 54.3125 C-5 54 -5 54 -7 52 C-7.43744906 48.50459078 -7.47804623 46.68670533 -5.43945312 43.75830078 C-4.72724609 43.07751465 -4.01503906 42.39672852 -3.28125 41.6953125 C-2.13076172 40.57382813 -2.13076172 40.57382813 -0.95703125 39.4296875 C-0.14621094 38.66914063 0.66460937 37.90859375 1.5 37.125 C2.31082031 36.34125 3.12164062 35.5575 3.95703125 34.75 C5.95853249 32.81913998 7.97265624 30.90364788 10 29 C8.73680902 26.26265518 7.41378517 24.1401852 5.35546875 21.94140625 C4.84306641 21.39033203 4.33066406 20.83925781 3.80273438 20.27148438 C3.26970703 19.70751953 2.73667969 19.14355469 2.1875 18.5625 C1.66607422 18.00240234 1.14464844 17.44230469 0.60742188 16.86523438 C-1.82672933 14.2609053 -4.28242298 11.7280228 -6.8515625 9.25390625 C-9 7 -9 7 -9.5625 4.375 C-9 2 -9 2 -7.3125 0.125 C-4.31552241 -1.3329891 -3.14564604 -1.01244596 0 0 Z '
      fill='#FBE5CC'
      transform='translate(175,130)'
    />
  </svg>
)

export default function Carousel({ cardData }: { cardData: CardData[] }) {
  const [activeIndex, setActiveIndex] = useState(
    Math.floor(cardData.length / 2)
  );
  const [isPaused, setIsPaused] = useState(false);
  const autoplayIntervalRef = useRef<number | null>(null);
  const autoplayDelay = 3000;

  const goToNext = () => {
    setActiveIndex((prev) => (prev + 1) % cardData.length);
  };

  useEffect(() => {
    if (!isPaused) {
      autoplayIntervalRef.current = setInterval(goToNext, autoplayDelay);
    }
    return () => {
      if (autoplayIntervalRef.current) {
        clearInterval(autoplayIntervalRef.current);
      }
    };
  }, [isPaused, activeIndex]);

  const changeSlide = (newIndex: number) => {
    const newSafeIndex = (newIndex + cardData.length) % cardData.length;
    setActiveIndex(newSafeIndex);
    if (autoplayIntervalRef.current) {
      clearInterval(autoplayIntervalRef.current);
    }
    if (!isPaused) {
      autoplayIntervalRef.current = setInterval(goToNext, autoplayDelay);
    }
  };

  const onDragEnd = (
    _event: MouseEvent | TouchEvent | PointerEvent,
    info: PanInfo
  ) => {
    const dragThreshold = 75;
    const dragOffset = info.offset.x;
    if (dragOffset > dragThreshold) {
      changeSlide(activeIndex - 1);
    } else if (dragOffset < -dragThreshold) {
      changeSlide(activeIndex + 1);
    }
  };

  return (
    <div
      className='w-full max-w-7xl mx-auto p-4'
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
    >
      <div className='relative flex w-full flex-col rounded-3xl p-4 pt-6 md:p-6'>
        <div 
          className='relative w-full h-[650px] md:h-[700px] flex items-center justify-center overflow-visible'
          style={{ marginTop: '-50px', marginBottom: '75px' }}
        >
          {/* Left Arrow Button */}
          <button
            onClick={() => changeSlide(activeIndex - 1)}
            className='absolute left-[-120px] top-1/2 -translate-y-1/2 z-50 p-2 hover:opacity-80 transition-opacity focus:outline-none'
            aria-label='Previous slide'
          >
            <ChevronLeftIcon className='w-24 h-24 md:w-28 md:h-28' />
          </button>

          <motion.div
            className='w-full h-full flex items-center justify-center'
            drag='x'
            dragConstraints={{ left: 0, right: 0 }}
            dragElastic={0.2}
            onDragEnd={onDragEnd}
          >
            {cardData.map((card, index) => (
              <Card
                key={card.id}
                card={card}
                index={index}
                activeIndex={activeIndex}
                totalCards={cardData.length}
              />
            ))}
          </motion.div>

          {/* Right Arrow Button */}
          <button
            onClick={() => changeSlide(activeIndex + 1)}
            className='absolute right-[-120px] top-1/2 -translate-y-1/2 z-50 p-2 hover:opacity-80 transition-opacity focus:outline-none'
            aria-label='Next slide'
          >
            <ChevronRightIcon className='w-24 h-24 md:w-28 md:h-28' />
          </button>
        </div>
      </div>
    </div>
  )
}

function Card({ card, index, activeIndex, totalCards }: CardProps) {
  const navigate = useNavigate()
  
  let offset = index - activeIndex
  if (offset > totalCards / 2) {
    offset -= totalCards
  } else if (offset < -totalCards / 2) {
    offset += totalCards
  }

  const isVisible = Math.abs(offset) <= 1

  const animate = {
    x: `${offset * 435}px`,
    scale: offset === 0 ? 1 : 0.85,
    zIndex: totalCards - Math.abs(offset),
    opacity: isVisible ? 1 : 0,
    transition: { type: 'spring' as const, stiffness: 260, damping: 30 }
  }

  return (
    <motion.div
      className='absolute w-[365px] h-full flex flex-col items-center justify-center'
      style={{
        transformStyle: 'preserve-3d'
      }}
      animate={animate}
      initial={false}
    >
      <div className='flex flex-col bg-transparent rounded-2xl hover:-translate-y-1 transition duration-300 w-full overflow-hidden border-2 border-red-800 shadow-2xl'>
        <div className='w-[365px] h-[545px] overflow-hidden rounded-t-2xl flex-shrink-0'>
          <img
            alt={card.title}
            className='w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform duration-300'
            src={card.imageUrl}
            onError={(e) => {
              const target = e.target as HTMLImageElement
              target.onerror = null
              target.src = 'https://placehold.co/400x600/1e1e1e/ffffff?text=Image+Missing'
            }}
          />
        </div>
        <div className='flex flex-col justify-between p-3 h-[155px] sm:h-[165px] md:h-[155px] bg-red-800'>
          <div className='h-[50px] sm:h-[55px] flex items-center justify-center'>
            <h3 className='font-bold text-white leading-tight line-clamp-2 text-base sm:text-lg md:text-base text-center'
                style={{ fontFamily: 'Merriweather, serif' }}>
              {card.title}
            </h3>
          </div>
          <div className='h-[45px] sm:h-[50px] flex items-center justify-center'>
            <p className='text-sm sm:text-base md:text-sm text-yellow-50 line-clamp-2 leading-tight text-center'
               style={{ fontFamily: 'Roboto, sans-serif' }}>
              {new Date(card.release_date).getFullYear()} | {card.genre.join(' - ')} | {card.duration} mins
            </p>
          </div>
          <div className='flex items-center justify-center gap-4 h-[40px] sm:h-[45px]'>
            <button
              onClick={() => {
                navigate(`/movies/${card.id}`);
                scrollTo(0, 0);
              }}
              className='px-4 sm:px-5 py-2 sm:py-2.5 text-sm font-bold bg-yellow-400 hover:bg-yellow-500 text-red-800 hover:text-red-900
          transition rounded-full cursor-pointer'
              style={{ fontFamily: 'Merriweather, serif' }}
            >
              <span className='hidden sm:inline'>Mua vé</span>
              <span className='sm:hidden'>Mua</span>
            </button>
            <p className='flex items-center gap-1 text-sm text-yellow-50'
               style={{ fontFamily: 'Roboto, sans-serif' }}>
              <svg
                stroke='currentColor'
                fill='currentColor'
                strokeWidth='0'
                viewBox='0 0 24 24'
                className='w-3 h-3 text-yellow-400 fill-yellow-400'
                height='1em'
                width='1em'
                xmlns='http://www.w3.org/2000/svg'
              >
                <path d='m6.516 14.323-1.49 6.452a.998.998 0 0 0 1.529 1.057L12 18.202l5.445 3.63a1.001 1.001 0 0 0 1.517-1.106l-1.829-6.4 4.536-4.082a1 1 0 0 0-.59-1.74l-5.701-.454-2.467-5.461a.998.998 0 0 0-1.822 0L8.622 8.05l-5.701.453a1 1 0 0 0-.619 1.713l4.214 4.107zm2.853-4.326a.998.998 0 0 0 .832-.586L12 5.43l1.799 3.981a.998.998 0 0 0 .832.586l3.972.315-3.271 2.944c-.284.256-.397.65-.293 1.018l1.253 4.385-3.736-2.491a.995.995 0 0 0-1.109 0l-3.904 2.603 1.05-4.546a1 1 0 0 0-.276-.94l-3.038-2.962 4.09-.326z'></path>
              </svg>
              {card.average_rating > 0 ? card.average_rating.toFixed(1) : 'N/A'}
            </p>
          </div>
        </div>
      </div>
    </motion.div>
  )
}
